/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef, useState } from "react";
import { OrbitControls, Stage, useGLTF } from "@react-three/drei";
import { Canvas, useFrame } from "@react-three/fiber";
import { MeshStandardMaterial } from "three";
import { useColor } from "./color-context";

function Model(props) {
  const group = useRef();
  const { nodes, materials } = useGLTF("/gameboy.gltf");

  const { bodyColor, abColor, buttonsColor } = useColor();

  useFrame((state) => {
    const { position, rotation } = group.current;
    const sin = Math.sin(state.clock.elapsedTime) / 550;
    position.y += sin;
    rotation.x += sin / 10;
    rotation.y += sin / 10;
    rotation.z += sin / 10;
  });

  const gameBoyColor = new MeshStandardMaterial({
    ...materials.frosting,
    color: bodyColor,
  });

  const abButtonsColor = new MeshStandardMaterial({
    ...materials.frosting,
    color: abColor,
  });

  const buttonColorMaterial = new MeshStandardMaterial({
    ...materials.frosting,
    color: buttonsColor,
  });
  return (
    <group ref={group} {...props} dispose={null}>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.D_Pad_Button.geometry}
        material={buttonColorMaterial}
        position={[-0.391, -0.299, 0.264]}
      />
      <group position={[0, 0.564, -0.168]}>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Cube004.geometry}
          material={materials.Screen_Grey}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Cube004_1.geometry}
          material={materials.Screen}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Cube004_2.geometry}
          material={materials["Screen.001"]}
        />
      </group>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.D_Pad_Bump.geometry}
        material={buttonColorMaterial}
        position={[-0.391, -0.299, 0.264]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cube002.geometry}
        material={gameBoyColor}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cube002_1.geometry}
        material={abButtonsColor}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cube002_2.geometry}
        material={buttonColorMaterial}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cube002_3.geometry}
        material={buttonColorMaterial}
      />
    </group>
  );
}

export const Gameboy = () => {
  const orbitControlsRef = useRef();

  return (
    <Canvas shadows>
      <Stage environment="park" controls={orbitControlsRef}>
        <Model />
        <OrbitControls ref={orbitControlsRef} />
      </Stage>
    </Canvas>
  );
};

useGLTF.preload("/gameboy.gltf");
